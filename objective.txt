Реализовать символьный драйвер, предлагающий возможность передавать информацию
двум независимым процессам через файл символьного устройства.

- Взаимодействие должно осуществляться по принципу кольцевого буфера; т.е. один
  процесс может писать в файл символьного устройства, а другой из него читать.
- Обеспечить возможность задавать размер кольцевого буфера через механизм
  параметров модулей ядра.
- По умолчанию вызовы чтения и записи должны быть блокирующими.
- Обеспечить поддержку нескольких вызовов IOCTL:
  - переключение режима работы вызовов read/write из блокирующих/неблокирующих и
    обратно;
  - обеспечить возможность получения информации о времени последней операции
    чтения и записи в буфер, а также идентификаторов и владельцев процессов,
    совершивших эту операцию.
- Драйвер должен собираться вне дерева исходных кодов ядра при помощи Makefile.
- Исходные коды драйвера должны находиться под системой контроля версий git и
  содержать историю коммитов.
- Результат передаётся в виде ссылки на репозиторий, размещённый на github или в
  виде архива, содержащего репозиторий с исходными кодами.
